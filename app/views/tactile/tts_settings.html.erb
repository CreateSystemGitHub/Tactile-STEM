<p>MP3<br>速さ　：
<select id="mp3-rate">
  <option value=0.5>遅い2</option>
  <option value=0.8>遅い1</option>
  <option value=1.0 selected>普通</option>
  <option value=1.5>速い1</option>
  <option value=2.0>速い2</option>
</select>
<br><br>
</p>
<p>音声(TTS)の選択</p>
<p>シーン：
  <select id="scene-select" >
    <option value=-1 selected>TTSを使用するシーンを選択</option>
    <option value=0 >TTS1 (ja) Default</option>
    <option value=1>TTS2 (ja)</option>
    <option value=2>TTS3 (en)</option>
    <option value=3>TTS4 (en)</option>
  </select>　
</p>

<p>音声　：
  <select id="voice-select"></select>　
  <button id="speak-btn">再生</button>
</p>
<p>速さ　：
<select id="voice-rate">
  <option value=0.6>遅い2</option>
  <option value=0.8>遅い1</option>
  <option value=0.9 selected>普通</option>
  <option value=1.0>速い1</option>
  <option value=1.2>速い2</option>
  <option value=1.5>速い3</option>
</select>
</p>
<p>高さ　：
<select id="voice-pitch">
  <option value=0.5>低い</option>
  <option value=1.0 selected>普通</option>
  <option value=1.5>高い　　</option>
</select>
</p>
<p>音量　：
<select id="voice-volume">
  <option value=0.4>小</option>
  <option value=0.7 selected>中</option>
  <option value=1.0>大　　　</option>
</select>
</p>
<br>
<p>触図に触れた時<br>
<select id="effect-Hover">
  <option value=0 selected>サウンドを鳴らさない</option>
  <option value=1>クリップボードデータがなければサウンドを鳴らす</option>
  <option value=2>クリップボードデータがあればサウンドを鳴らす</option>
  <option value=3>クリップボードデータがあってもなくてもSサウンドを鳴らす</option>
</select>
<br>
<br>
<br>
<p>
  <input type="button" onclick="history.back()" value="キャンセル">　　　
  <input type="button" onclick="save_exit()" value="　　ＯＫ　　">　　　
</p>

<script type="text/javascript">
  const sceneSelect  = document.querySelector('#scene-select');
  const voiceSelect  = document.querySelector('#voice-select');
  const rateSelect   = document.querySelector('#voice-rate');
  const pitchSelect  = document.querySelector('#voice-pitch');
  const volumSelect  = document.querySelector('#voice-volume');
  const mp3rateSelect  = document.querySelector('#mp3-rate');
  const speakBtn     = document.querySelector('#speak-btn');
  const hoverSelect  = document.querySelector('#effect-Hover');
  const okBtn        = document.querySelector('#ok-btn');

  var svoices = new Array("","","","");
  var rates  = new Array("0.8","0.8","0.8","0.8");
  var pitchs = new Array("1.0","1.0","1.0","1.0");
  var volums = new Array("0.7","0.7","0.7","0.7");

  var mp3rate  = "1.0";
  var effect_hover = 0;

  //各シーン毎のTTSパラメーターをロード
  load_tts_param();
  mp3rateSelect.value = mp3rate;
  hoverSelect.value = effect_hover;

  var v_scene = -1;
  function sceneSelectChanged(){
    var s = sceneSelect.value;
    if (s < 0) {
      sceneSelect.value = 0;
      s = 0;
    }
    v_scene = s;
    //console.log("sceneSelect1:"+v_scene+",voice="+svoices[v_scene]+",rate="+rates[v_scene]+",pitch="+pitchs[v_scene]+",vol="+volums[v_scene]);
    appendVoices();
    voiceSelect.value = svoices[v_scene];
    rateSelect.value = rates[v_scene];
    pitchSelect.value = pitchs[v_scene];
    volumSelect.value = volums[v_scene];
    //console.log("sceneSelect2:"+v_scene+",voice="+voiceSelect.value+",rate="+rates[v_scene]+",pitch="+pitchs[v_scene]+",vol="+volums[v_scene]);
  }
  sceneSelect.addEventListener('change', sceneSelectChanged);

  voiceSelect.addEventListener('change', function() {
    svoices[v_scene] = voiceSelect.value;
  })
  rateSelect.addEventListener('change', function() {
    rates[v_scene] = rateSelect.value;
  })
  pitchSelect.addEventListener('change', function() {
    pitchs[v_scene] = pitchSelect.value;
  })
  volumSelect.addEventListener('change', function() {
    volums[v_scene] = volumSelect.value;
  })
  mp3rateSelect.addEventListener('change', function() {
    mp3rate = mp3rateSelect.value;
  })
  hoverSelect.addEventListener('change', function() {
    effect_hover = hoverSelect.value;
  })

  // selectタグに音声を集計
  function appendVoices() {
    //初回実行時の getVoices() は空配列が返される。
    //この関数はユーザーによる操作が介在しないといけないので、シーンコンボの操作をトリガーとする。
    const voices = speechSynthesis.getVoices();
    if (voices.length==0){
      console.log("voices.length=0");
    }
    voiceSelect.innerHTML = '';
    voices.forEach(voice => {
      // 日本語Only
      if(voice.lang.match('ja') && (v_scene==0 || v_scene == 1)){
        const option = document.createElement('option');
        option.value = voice.name;
        option.text  = `${voice.name}`;
        voiceSelect.appendChild(option);
      }
      if(voice.lang.match('en') && (v_scene==2 || v_scene == 3)){
        const option = document.createElement('option');
        option.value = voice.name;
        option.text  = `${voice.name}`;
        voiceSelect.appendChild(option);
      }
    });
  }

  //非同期に一個ずつVoiceを上げてくる
  speechSynthesis.onvoiceschanged = e => {
    appendVoices();
  }

  speakBtn.addEventListener('click', function() {
    var uttr;
    if (v_scene==0 || v_scene == 1) uttr = new SpeechSynthesisUtterance("こんにちは、お元気ですか");
    if (v_scene==2 || v_scene == 3) uttr = new SpeechSynthesisUtterance("Hello, how are you");
    uttr.voice = speechSynthesis.getVoices()
                                .filter(voice => voice.name === svoices[v_scene])[0];
    uttr.rate = rates[v_scene];
    uttr.pitch = pitchs[v_scene];
    uttr.volume = volums[v_scene];
    speechSynthesis.speak(uttr);
  })

  function save_exit(){
    localStorage.setItem("voiceVoice", svoices.toString());
    localStorage.setItem("voiceRate",  rates);
    localStorage.setItem("voicePitch", pitchs);
    localStorage.setItem("voiceVolum", volums);
    localStorage.setItem("mp3Rate",    mp3rate);
    localStorage.setItem("effectHover",effect_hover);
/*
    console.log("save_exit():voice="+svoices.toString());
    console.log("save_exit():rates="+rates);
    console.log("save_exit():pitch="+pitchs+","+volums);
    console.log("save_exit():mp3rate="+mp3rate);
    console.log("save_exit():effectHover="+effect_hover);
*/
    history.back();
  }
  function load_tts_param(){
    let aa = localStorage.getItem("voiceVoice");
    if (aa != null ) svoices = aa.split(",");
    let bb = localStorage.getItem("voiceRate");
    if (bb != null ) rates = bb.split(",");
    let cc = localStorage.getItem("voicePitch");
    if (cc != null ) pitchs = cc.split(",");
    let dd = localStorage.getItem("voiceVolum");
    if (dd != null ) volums = dd.split(",");
    let ee = localStorage.getItem("mp3Rate");
    if (ee != null ) mp3rate = ee;
    let ff = localStorage.getItem("effectHover");
    if (ff != null ) effect_hover = ff;
/*
    console.log("load_tts_param():voice="+svoices[0]+","+svoices[1]+","+svoices[2]+","+svoices[3]);
    console.log("load_tts_param():rates="+rates[0]+","+rates[1]+","+rates[2]+","+rates[3]);
    console.log("load_tts_param():pitchs="+pitchs[0]+","+pitchs[1]+","+pitchs[2]+","+pitchs[3]);
    console.log("load_tts_param():volums="+volums[0]+","+volums[1]+","+volums[2]+","+volums[3]);
    console.log("load_tts_param():mp3rate="+mp3rate);
    console.log("load_tts_param():effectHover="+effect_hover);
*/
  }

</script>
